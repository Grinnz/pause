#!/usr/bin/env perl
use strict;
use warnings;
use lib 'lib';
use lib 't/lib';

use File::pushd;
use File::Temp ();
use JSON;
use Getopt::Long::Descriptive 0.104; # verbatim spacers -- rjbs, 2019-04-27
use Path::Class;
use Parse::CPAN::Packages;
use Parse::CPAN::Perms;

# Hey, wouldn't it be cool if there was a --starting-cpan option to say "clone
# this whole [mini]cpan mirror and load its 02 and 06 and then inject stuff
# into that.  Then you could see "what would happen in production?" (Almost.)
# -- rjbs, 2019-04-26

my ($opt, $usage) = describe_options(
  '%c %o TYPE:WHAT...',

  [ 'dir=s',          'target directory; by default uses a tempdir' ],
  [ 'verbose|v',      'print logs to STDERR as it goes'             ],

  [ 'packages|p=s',   '02packages file to prefill packages table'   ],
  [ 'perms|P=s',      '06perms file to prefill mods/primeur/perms'  ],
  [ 'default-user=s', 'default PAUSEID for uploads; default: LOCAL',
                      { default => 'LOCAL' } ],

  [ 'stdin|I',        'read instructions from STDIN to run before ARGV' ],
  [ 'each',           'index at start and after each upload'        ],

  [ 'shell!',         'add an implicit "shell" as last instruction; on by default',
                      { default => 1 } ],
  [],
  [ \<<'EOT' ],
Other than the --switches, arguments are instructions in one of the forms
below.  For those that list PAUSEID, it may be omitted, and the default
user is used instead.

Valid instructions are:

  form                   | meaning
  -----------------------+-----------------------------------------------
  reindex                | reindex now
  reindex:FILE           | reindex just one file
                         |
  perms:PAUSEID:PKG:PERM | set perm (f or c or 0) for PAUSEID on PKG
                         |
  file:PAUSEID:FILE      | upload the named file as the named PAUSE user
  fake:PAUSEID:FILE      | generate a dist based on the given filename
  json:PAUSEID:JSON      | interpret the given JSON string as a faker struct
  perl:PAUSEID:PERL      | interpret the given Perl string as a faker struct
                         |
  adir:DIRECTORY         | author dir: dir with A/AB/ABC/Dist-1.0.tar.gz files
  fdir:DIRECTORY         | flat dir: upload all the files as default user
                         |
  prog:file              | read a file containing a list of instructions
  progcmd:"program"      | run program, which should print out instructions
  cmd                    | run a command in the working directory
  shell                  | run a shell in the working directory

prog and progcmd output can split instructions across multiple lines.  Lines
that begin with whitespace will be appended to the line preceding them.
EOT
);

my @instructions = @ARGV;

if ($opt->stdin) {
  my @lines = <STDIN>;
  chomp @lines;
  unfold_lines(\@lines);

  unshift @instructions, @lines;
}

$usage->die({ pre_text => "you didn't give any instructions!\n\n" })
  unless @instructions;

require PAUSE::TestPAUSE;

my $dir = $opt->dir;
my $tmpdir;
unless ($dir) {
  $tmpdir = File::Temp->newdir;
  $dir = "$tmpdir";
}

# Probably stupid. -- rjbs, 2019-04-27
$ENV{TEST_VERBOSE} = 1 if $opt->verbose;

my $pause = PAUSE::TestPAUSE->init_new({
  tmpdir                 => dir($dir),
  email_sender_transport => 'Maildir',
  email_sender_transport_args => {
    dir => "$dir/Maildir", # Capital M to keep rjbs happy
  },
});

if ($opt->packages) {
  $pause->with_our_config(sub {
    my $dbh = PAUSE::dbh();

    my $p = Parse::CPAN::Packages->new($opt->packages);

    my $query = "INSERT INTO packages (package, version, dist, status) VALUES (?, ?, ?, ?);";

    my $count = 0;

    print "Inserting packages from " . $opt->packages . "...\n";

    $dbh->begin_work;

    for my $pkg ($p->packages) {
      dbh_do($dbh, $query, {},
        $pkg->package,
        $pkg->version,
        $pkg->distribution->prefix,
        "indexed",
      );

      $count++;
    }

    $dbh->commit;

    print "\t...done! Inserted $count packages\n";
  });
}

if ($opt->perms) {
  $pause->with_our_config(sub {
    my $dbh = PAUSE::dbh();

    my $p = Parse::CPAN::Perms->new($opt->perms);

    my $perms_data = $p->perms;

    my %queries = (
      m => "INSERT INTO mods    (modid,   userid) VALUES (?, ?)",
      f => "INSERT INTO primeur (package, userid) VALUES (?, ?)",
      c => "INSERT INTO perms   (package, userid) VALUES (?, ?)",
    );

#    my %inserted;

    my $count = 0;

    print "Inserting perms from " . $opt->perms . "...\n";

    $dbh->begin_work;

    for my $pkg (keys %$perms_data) {
      for my $user (keys %{ $perms_data->{$pkg} }) {
        my $perm = $perms_data->{$pkg}->{$user};

#        # Add a users entry for the user ?
#        unless ($inserted{$user}++) {
#          dbh_do($dbh, "INSERT INTO users (userid, ustatus) VALUES (?, ?)", {},
#            $user, 'active',
#          );
#        }

        my $query = $queries{$perm} || die "Unknown perm flag $perm\n";

        dbh_do($dbh, $query, {},
          $pkg, $user,
        );

        $count++;
      }
    }

    $dbh->commit;

    print "\t...done! Inserted $count permissions\n";
  });
}

my $JSON = JSON->new->relaxed(1);

my $index_clean;

INSTRUCTION: while (my $instruction = shift @instructions) {
  if ($instruction eq 'reindex') {
    $pause->logger->log("FRESH: performing a reindex");
    $pause->test_reindex;
    $index_clean = 1;
    next INSTRUCTION;
  }

  if ($instruction eq 'shell') {
    my $chdir_guard = pushd($dir);
    $pause->logger->log("FRESH: running a shell ($ENV{SHELL})");
    system($ENV{SHELL});
    next INSTRUCTION;
  }

  my ($type, $rest) = split /\s*:\s*/, $instruction, 2;

  if ($type eq 'cmd') {
    $pause->logger->log("FRESH: running command [$rest]");
    my $chdir_guard = pushd($dir);
    system($rest);
    next INSTRUCTION;
  }

  if ($type eq 'reindex') {
    $pause->logger->log("FRESH: performing pick reindex of $rest");
    $pause->test_reindex({ pick => [$rest] });
    next INSTRUCTION;
  }

  # perms:PAUSEID:PKG:PERM | set perm (f or c or 0) for PAUSEID on PKG
  if ($type eq 'perms') {
    my @rest = split /(?<!:)\s*:\s*(?!:)/, $rest;
    my ($user, $package, $perm)
      = @rest == 2 ? ($opt->default_user, @rest)
      : @rest == 3 ? (@rest)
      : die "incomprehensible instruction: $instruction\n";

    die "bogus permission type ($perm) in $instruction\n"
      unless $perm eq 'f' or $perm eq 'c' or $perm eq '0';

    $pause->with_our_config(sub {
      my $dbh = PAUSE::dbh();
      $dbh->begin_work;
      for my $table (qw(primeur perms)) {
        $dbh->do(
          "DELETE FROM $table WHERE package = ? AND userid = ?",
          undef,
          $package,
          $user,
        );
      }

      my @tables = $perm eq 'f' ? (qw(primeur perms))
                 : $perm eq 'c' ? (qw(        perms))
                 :                ();

      for my $table (@tables) {
        $dbh->do(
          "INSERT INTO $table (package, userid) VALUES (?, ?)",
          undef,
          $package,
          $user,
        );
      }

      $dbh->commit;
    });

    $pause->logger->log("FRESH: set $user permissions on $package to $perm");

    next INSTRUCTION;
  }

  if ($type eq 'progcmd') {
    my @lines = `$rest`;
    chomp @lines;

    unfold_lines(\@lines);

    $pause->logger->log([ "FRESH: ran `$rest`, unshifting %s", \@lines ]);

    unshift @instructions, @lines;
    next INSTRUCTION;
  }

  if ($type eq 'prog') {
    my @lines = grep {; chomp; length && ! /^#/ }
                split /\n/, file($rest)->slurp;

    unfold_lines(\@lines);

    $pause->logger->log([ "FRESH: processed $rest, unshifting %s", \@lines ]);

    unshift @instructions, @lines;
    next INSTRUCTION;
  }

  if ($type eq 'fdir') {
    $rest =~ s/\A~/$ENV{HOME}/; # for my own sake -- rjbs, 2019-04-26
    my @to_inject = map {; "file:$_" } grep {; -f } <$rest/*>;

    $pause->logger->log([ "FRESH: processed $rest, adding %s", \@to_inject ]);

    unshift @instructions, @to_inject;
    next INSTRUCTION;
  }

  if ($type eq 'adir') {
    $rest =~ s/\A~/$ENV{HOME}/; # for my own sake -- rjbs, 2019-04-26
    $pause->import_author_root($rest);

    $pause->logger->log([ "FRESH: importing author dir $rest" ]);

    $index_clean = 0;

    next INSTRUCTION;
  }

  my ($lhs, $rhs) = split /\s*:\s*/, $rest, 2;
  my $user  = defined $rhs ? $lhs : $opt->default_user;
  my $param = defined $rhs ? $rhs : $lhs;

  if ($type eq 'fake') {
    $pause->upload_author_fake($user => $param);
    $index_clean = 0;
    $pause->logger->log([ "FRESH: just uploaded fake from $user/$param" ]);
    next;
  }

  if ($type eq 'file') {
    $param =~ s/\A~/$ENV{HOME}/; # for my own sake -- rjbs, 2019-04-26
    $pause->upload_author_file($user => $param);
    $index_clean = 0;
    $pause->logger->log([ "FRESH: just uploaded $user/$param" ]);
    next;
  }

  my $data = $type eq 'json' ? $JSON->decode($param)
           : $type eq 'perl' ? insane_safe_eval($param)
           : die "didn't recognize instruction type: $instruction\n";

  $pause->upload_author_fake($user => $data);
  $index_clean = 0;

  $pause->logger->log([ "FRESH: just uploaded $user/$param" ]);
} continue {
  if ($opt->each && ! $index_clean) {
    $pause->test_reindex;
    $index_clean = 1
  }
}

$pause->test_reindex unless $index_clean;

if ($opt->shell) {
  my $chdir_guard = pushd($dir);
  system($ENV{SHELL});
}

sub insane_safe_eval {
  my ($perl) = @_;
  my $pid = open my $fh, '-|',
    $^X, '-MJSON', '-E', "say encode_json($perl)";

  die "couldn't spawn $^X: $!" unless $pid;

  my $json = do { local $/; <$fh> };

  close $fh or die "error closing pipe: $!";

  $JSON->decode($json);
}

sub unfold_lines {
  my ($lines) = @_;
  for my $i (reverse 1 .. $#$lines) {
    next unless $lines->[$i] =~ /^\s/;
    $lines->[$i - 1] .= $lines->[$i];
    splice @$lines, $i, 1;
  }
}

sub dbh_do {
  my ($dbh, @args) = @_;

  my $ret;

  # Capture errors so we can hopefully provide some
  # useful debug.
  eval {
    $ret = $dbh->do(@args);
  };

  my $err = "";
  $err = $dbh->errstr unless defined $ret;
  $err ||= $@;

  die "Failed insertion (@args): $err\n" if $err;
}

1;
